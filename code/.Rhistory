install.packages('glmnet')
require(glmnet)
require(data.table)
vae.file = '../data/encoded_methyl_onehidden_warmup_batchnorm_100K-10.tsv'
vae_features = data.frame(fread(vae.file), row.names=1)
View(vae_features)
vae_features = data.frame(fread(vae.file), row.names=1, col.names=1)
View(vae_features)
vae_features = data.frame(fread(vae.file), row.names=1)
colnames(vae_features) = vae_features[1, ]
vae_features[1, ] = NULL
vae_features[1, ] = NULL
vae_features = vae_features[2:nrow(vae_features), ]
BRCA.covFile = '../data/BRCAtarget_covariates.csv'
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
View(BRCA.covs)
vae_features$Basename = colnames(vae_features)
vae_features$Basename = rownames(vae_features)
full.data = merge(vae_features, BRCA.covs, by='Basename')
View(full.data)
x <- model.matrix(PAM50.RNAseq~., full.data)[,-1]
x <- model.matrix(PAM50.RNAseq~., full.data)
x <- model.matrix(PAM50.RNAseq~., data = full.data)
table(full.data$PAM50.RNAseq)
x <- model.matrix(PAM50.RNAseq~1 + 2 + , data = full.data)
x <- model.matrix(PAM50.RNAseq~1 + 2 + 3, data = full.data)
x <- model.matrix(~1 + 2 + 3, data = full.data)
full.data$1`1`
full.data$`1`
x <- model.matrix(~`1` + `2` + `3`, data = full.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
x <- model.matrix(PAM50.RNAseq~, data = full.data[,1:10])
x <- model.matrix(PAM50.RNAseq~., data = full.data[,1:10])
x <- model.matrix(PAM50.RNAseq~., data = full.data[,1:10, 'PAM50.RNAseq'])
x <- model.matrix(PAM50.RNAseq~., data = full.data[,2:14 ])
View(x)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
x[train,]
View(x)
colnames(full.data[,2:14 ])
temp.data = full.data[,2:14 ]
temp.data = temp.data[, -"X_SAMPLE_ID"]
temp.data = temp.data[, -X_SAMPLE_ID]
colnames(temp.data)
temp.data = temp.data[, -which(names(temp.data) %in% c("X_SAMPLE_ID")]
x <- model.matrix(PAM50.RNAseq~., data = full.data[,2:14 ])
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
mean((lasso.pred-ytest)^2)
temp.data = temp.data[, -which(colnames(temp.data) %in% c("X_SAMPLE_ID")]
x <- model.matrix(PAM50.RNAseq~., data = full.data[,2:14 ])
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
mean((lasso.pred-ytest)^2)
temp.data = full.data[,2:14 ]
temp.data = temp.data[, -which(colnames(temp.data) %in% c("X_SAMPLE_ID"))]
View(temp.data)
x <- model.matrix(PAM50.RNAseq~., data = full.data[,2:14 ])
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
View(x)
temp.data = full.data[,2:14 ]
temp.data = temp.data[, -which(colnames(temp.data) %in% c("X_SAMPLE_ID"))]
x <- model.matrix(PAM50.RNAseq~., data = temp.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
View(x)
temp.data = temp.data[, -which(colnames(temp.data) %in% c("X_SAMPLE_ID", "X"))]
x <- model.matrix(PAM50.RNAseq~., data = temp.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
is.na(x)
temp.data = temp.data[!is.na(temp.data$PAM50.RNAseq), ]
x <- model.matrix(PAM50.RNAseq~., data = temp.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
vae.file = '../data/encoded_methyl_onehidden_warmup_batchnorm_100K-10.tsv'
BRCA.covFile = '../data/BRCAtarget_covariates.csv'
vae_features = data.frame(fread(vae.file), row.names=1)
colnames(vae_features) = vae_features[1, ]
vae_features = vae_features[2:nrow(vae_features), ]
vae_features$Basename = rownames(vae_features)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
full.data = merge(vae_features, BRCA.covs, by='Basename')
temp.data = full.data[,2:14 ]
temp.data = temp.data[, -which(colnames(temp.data) %in% c("X_SAMPLE_ID", "X"))]
temp.data = temp.data[!is.na(temp.data$PAM50.RNAseq), ]
x <- model.matrix(PAM50.RNAseq~., data = temp.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
is.na(temp.data$PAM50.RNAseq)
temp.data$PAM50.RNAseq == ''
temp.data = temp.data[temp.data$PAM50.RNAseq != '', ]
x <- model.matrix(PAM50.RNAseq~., data = temp.data)
y <- full.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
is.na(temp.data)
temp.data$randu = runif(nrow(temp.data), 0,1)
temp.data.traing = temp.data[temp.data$randu < .4,]
temp.data.test = temp.data[temp.data$randu >= .4,]
temp.data.train = temp.data[temp.data$randu < .4,]
authorship.model.rf = randomForest(PAM50.RNAseq ~ `1` + `2` + `3` + `4` + `5` +
`6` + `7` + `8` + `9` + `10`,
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
?randomForest
install.packages('randomForest')
library(randomForest)
authorship.model.rf = randomForest(PAM50.RNAseq ~ `1` + `2` + `3` + `4` + `5` +
`6` + `7` + `8` + `9` + `10`,
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
colnames(temp.data)
authorship.model.rf = randomForest(PAM50.RNAseq ~ "1" + "2" + "3" + "4" + "5" +
"6" + "7" + "8" + "9" + "10"",
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
l
sd
)
authorship.model.rf = randomForest(PAM50.RNAseq ~ "1" + "2" + "3" + "4" + "5" +
"6" + "7" + "8" + "9" + "10",
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
authorship.model.rf = randomForest(PAM50.RNAseq ~ "1" + "2" + "3" + "4" + "5" +
"6" + "7" + "8" + "9" + "10",
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
authorship.model.rf = randomForest(PAM50.RNAseq ~ "1" + "2" + "3" + "4" + "5" +
"6" + "7" + "8" + "9" + "10",
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
names(temp.data)
authorship.model.rf = randomForest(PAM50.RNAseq ~ 1,
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
authorship.model.rf = randomForest(PAM50.RNAseq ~ "1",
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
colnames(temp.data) = c( "one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", "ten",
"PAM50.RNAseq", "randu")
authorship.model.rf = randomForest(PAM50.RNAseq ~ one,
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
colnames(temp.data) = c( "one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", "ten",
"PAM50.RNAseq", "randu")
temp.data$randu = runif(nrow(temp.data), 0,1)
temp.data.train = temp.data[temp.data$randu < .4,]
temp.data.test = temp.data[temp.data$randu >= .4,]
authorship.model.rf = randomForest(PAM50.RNAseq ~ one,
data=temp.data.train, ntree=5000,
mtry=15, importance=TRUE)
x <- model.matrix(PAM50.RNAseq~., temp.data)[,-1]
View(x)
x <- model.matrix(PAM50.RNAseq~., temp.data)
x <- model.matrix(PAM50.RNAseq~., temp.data)[,-1]
y <- temp.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
is.na(x[,1])
as.numeric(x[,1])
as.numeric(x)
x <- as.matrix(model.matrix(PAM50.RNAseq~., temp.data)[,-1])
y <- temp.data$PAM50.RNAseq
lambda <- 10^seq(10, -2, length = 100)
set.seed(489)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
ytest = y[test]
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
as.numeric(x[,1])
is.numeric(temp.data$one)
is.numeric(temp.data$two)
x[,1]
temp.data$one
unlist(x[,1])
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda)
lasso.mod <- glmnet(x, y, alpha = 1, lambda = lambda)
lasso.mod <- glmnet(x, y)
?glmnet
lasso.mod <- glmnet(x, y, family = 'multinomial')
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, lambda = lambda, family = 'multinomial')
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
mean((lasso.pred-ytest)^2)
mean((lasso.pred-ytest)^2)
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
plot(lasso.mod)
lasso.mod
mean((lasso.pred-ytest)^2)
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x[test,])
lasso.pred <- predict(lasso.mod, newx = x[test,])
mean((lasso.pred-ytest)^2)
lasso.pred
lasso.mod <- glmnet(x[train,], y[train], alpha = 1, family='multinomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
lasso.mod <- glmnet(x[train,], y[train], family='multinomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
lasso.mod <- glmnet(x[train,], y[train], family='multinomial', alpha=1, type.measure='auc')
lasso.mod <- glmnet(x[train,], y[train], family='multinomial', alpha=1, standardize=TRUE)
plot(lasso.mod)
plot(lasso.mod$glmnet.predict)
plot(lasso.mod$glmnet.fit, xvar="lambda", label=TRUE)
lasso.pred <- predict(lasso.mod, newx = x[test,])
plot(lasso.pred)
plot(lasso.mod)
plot(lasso.pred)
lasso.pred
plot(lasso.mod)
lasso.mod$beta
lasso.mod$lambda
lasso.mod$classnames
lasso.mod$grouped
lasso.mod$call
lasso.mod$beta
lasso.mod <- cv.glmnet(x[train,], y[train], family='multinomial', alpha=1, standardize=TRUE)
plot(lasso.mod)
plot(lasso.mod$glmnet.fit, xvar="lambda", label=TRUE)
lasso.mod$lambda.min
lasso.mod$lambda.1se
lasso.pred <- cv.predict(lasso.mod, newx = x[test,])
lasso.pred <- predict(lasso.mod, newx = x[test,])
mean((lasso.pred-ytest)^2)
lasso.pred
coef(lasso.mod, s=lasso.mod$lambda.min)
coeffic = coef(lasso.mod, s=lasso.mod$lambda.min)
coeffic = data.frame(coef(lasso.mod, s=lasso.mod$lambda.min))
coeffic = coef(lasso.mod, s=lasso.mod$lambda.min)
coeffic$Basal
coeffic$Her2
?kmeans
lasso.pred
clusters = kmeans(lasso.pred, 3, nstart = 20)
clusters
clusters = kmeans(lasso.pred, 5, nstart = 20)
clusters
View(full.data)
clusters$cluster <- as.factor(clusters$cluster)
ggplot(temp.data, aes(one, two, color = cluster$cluster)) + geom_point()
require(ggplot2)
ggplot(temp.data, aes(one, two, color = cluster$cluster)) + geom_point()
clusters$cluster
ggplot(temp.data, aes(one, two, color = clusters$cluster)) + geom_point()
ggplot(temp.data, aes(one, two, color = temp.data$cluster)) + geom_point()
ggplot(temp.data, aes(one, two)) + geom_point()
plot(lasso.mod$glmnet.fit, xvar="lambda", label=TRUE)
plot(lasso.mod)
plot(lasso.mod$glmnet.fit, xvar="lambda", label=TRUE)
coeffic = coef(lasso.mod, s=lasso.mod$lambda.min)
coeffic$Basal
coeffic$Basal@i
coeffic$Basal@p
coeffic$Basal@Dim
coeffic$Basal@Dimnames
coeffic$Basal@x
coeffic$Basal@Dimnames
coeffic$Basal@Dim
coeffic$Basal@factors
vae.file = '../data/encoded_methyl_onehidden_warmup_batchnorm_100K-100.tsv'
rm(list = ls())
vae.file = '../data/encoded_methyl_onehidden_warmup_batchnorm_100K-100.tsv'
BRCA.covFile = '../data/BRCAtarget_covariates.csv'
vae_features = data.frame(fread(vae.file), row.names=1)
colnames(vae_features) = vae_features[1, ]
vae_features = vae_features[2:nrow(vae_features), ]
vae_features$Basename = rownames(vae_features)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
full.data = merge(vae_features, BRCA.covs, by='Basename')
library(reshape2)
melted_cormat <- melt(vae_features)
head(vae_features)
View(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
View(melted_cormat)
ggplot(data = melted_cormat, aes(x=variable, y=value, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x=variable, y=Basename, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x=variable, y=Basename, fill=value))
require(heatmap3)
heatmap3(vae_features)
View(vae_features)
clusters = kmeans(vae_features, 5, nstart = 20)
clusters
is.na(vae_features)
