fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$BasalVother)
basalAccuracy = 1-misClasificError
print(paste('Accuracy = ', basalAccuracy))
#########################
# Build model - logistic regression "Classify as Luminal" - 3D
temp.data = full.data[, c('LumAVother', '1.y', '2.y', '3.y', 'PAM50.RNAseq')]
train.data = temp.data[train.prob == 1, ]
test.data = temp.data[train.prob == 0, ]
table(train.data$PAM50.RNAseq);table(test.data$PAM50.RNAseq)
train.data = train.data[, c('LumAVother', '1.y', '2.y', '3.y')]
test.data = test.data[, c('LumAVother', '1.y', '2.y', '3.y')]
model <- glm(factor(LumAVother) ~., family=binomial(link='logit'), data=train.data)
summary(model)
# Testing the model
fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$LumAVother)
print(paste('Accuracy',1-misClasificError))
#########################
# Build model - logistic regression "Classify as Luminal" - 2D
temp.data = full.data[, c('LumAVother', '1.y', '2.y', 'PAM50.RNAseq')]
train.data = temp.data[train.prob == 1, ]
test.data = temp.data[train.prob == 0, ]
table(train.data$PAM50.RNAseq);table(test.data$PAM50.RNAseq)
train.data = train.data[, c('LumAVother', '1.y', '2.y')]
test.data = test.data[, c('LumAVother', '1.y', '2.y')]
model <- glm(factor(LumAVother) ~., family=binomial(link='logit'), data=train.data)
summary(model)
# Testing the model
fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$LumAVother)
print(paste('Accuracy',1-misClasificError))
#########################
# Build model - logistic regression "Classify as Luminal" - 3D
temp.data = full.data[, c('LumBVother', '1.y', '2.y', '3.y', 'PAM50.RNAseq')]
train.data = temp.data[train.prob == 1, ]
test.data = temp.data[train.prob == 0, ]
table(train.data$PAM50.RNAseq);table(test.data$PAM50.RNAseq)
train.data = train.data[, c('LumBVother', '1.y', '2.y', '3.y')]
test.data = test.data[, c('LumBVother', '1.y', '2.y', '3.y')]
model <- glm(factor(LumBVother) ~., family=binomial(link='logit'), data=train.data)
summary(model)
# Testing the model
fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$LumBVother)
print(paste('Accuracy',1-misClasificError))
#########################
# Build model - logistic regression "Classify as Luminal" - 2D
temp.data = full.data[, c('LumBVother', '1.y', '3.y', 'PAM50.RNAseq')]
train.data = temp.data[train.prob == 1, ]
test.data = temp.data[train.prob == 0, ]
table(train.data$PAM50.RNAseq);table(test.data$PAM50.RNAseq)
train.data = train.data[, c('LumBVother', '1.y', '3.y')]
test.data = test.data[, c('LumBVother', '1.y', '3.y')]
model <- glm(factor(LumBVother) ~., family=binomial(link='logit'), data=train.data)
summary(model)
# Testing the model
fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$LumBVother)
print(paste('Accuracy',1-misClasificError))
# Basal-like classification
## 3D
```{r}
#########################
# Build model - logistic regression "Classify as Basal" - 3D
temp.data = full.data[, c('BasalVother', '1.y', '2.y', '3.y', 'PAM50.RNAseq')]
train.data = temp.data[train.prob == 1, ]
test.data = temp.data[train.prob == 0, ]
table(train.data$PAM50.RNAseq);table(test.data$PAM50.RNAseq)
train.data = train.data[, c('BasalVother', '1.y', '2.y', '3.y')]
test.data = test.data[, c('BasalVother', '1.y', '2.y', '3.y')]
model <- glm(factor(BasalVother) ~., family=binomial(link='logit'), data=train.data)
summary(model)
# Testing the model
fitted.results <- predict(model, newdata=test.data, type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test.data$BasalVother)
basalAccuracy = 1-misClasificError
print(paste('Accuracy = ', basalAccuracy))
### Setup the environment we need ###
source("https://bioconductor.org/biocLite.R")
# biocLite("qvalue")
# install.packages('glmnet')
# install.packages('data.table')
require(glmnet)
require(data.table)
library(limma)
library(qvalue)
#dir = '/Users/alexandertitus/Documents/github/DNAm_data_generation/code'
dir = 'C:/Users/atitus/Documents/github/DNAm_data_generation/results'
setwd(dir)
dir = 'C:/Users/atitus/Documents/github/VAE_analysis/results'
setwd(dir)
# Load all the data and make variables
### Load our data to work with ###
vae.file = 'encoded_methyl_onehidden_warmup_batchnorm_300K-100.tsv'
BRCA.covFile = '../BRCAtarget_covariates.csv'
tSNE.file = '../results/tSNE/vae_tsne_out_300K-100_3d.tsv'
tSNE_features = data.frame(fread(tSNE.file), row.names=1)
colnames(tSNE_features) = tSNE_features[1, ]
tSNE_features = tSNE_features[2:nrow(tSNE_features), ]
tSNE_features$Basename = rownames(tSNE_features)
vae_features = data.frame(fread(vae.file), row.names=1)
colnames(vae_features) = vae_features[1, ]
vae_features = vae_features[2:nrow(vae_features), ]
vae_features$Basename = rownames(vae_features)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
BRCA.covs$sample.typeInt = ifelse(BRCA.covs$sample.type == 'Solid Tissue Normal', 0, 1)
full.data = merge(vae_features, BRCA.covs, by='Basename')
full.data = merge(full.data, tSNE_features, by='Basename')
full.data$BasalVother = ifelse(full.data$PAM50.RNAseq == "Basal", 1, 0)
full.data$NormalVother = ifelse(full.data$PAM50.RNAseq == "Normal", 1, 0)
full.data$Her2Vother = ifelse(full.data$PAM50.RNAseq == "Her2", 1, 0)
full.data$LumAVother = ifelse(full.data$PAM50.RNAseq == "LumA", 1, 0)
full.data$LumBVother = ifelse(full.data$PAM50.RNAseq == "LumB", 1, 0)
full.data$LumVother = ifelse(full.data$PAM50.RNAseq == "LumA" |
full.data$PAM50.RNAseq == "LumB", 1, 0)
## LaWAS
# Create our model matrix
BRCA.covsSub = BRCA.covs[!is.na(BRCA.covs$age.Dx), ]
vae_featuresSub = vae_features[rownames(vae_features) %in% BRCA.covsSub$Basename,]
boxplot(vae_featuresSub)
View(vae_featuresSub)
View(t(vae_featuresSub))
boxplot(t(vae_featuresSub))
boxplot(vae_featuresSub[1,])
class(vae_featuresSub[1,])
?boxplot
library(ggplot2)
dat$group <- row.names(dat)
dat.m <- melt(dat, id.vars = "group")
ggplot(dat.m, aes(group, value)) + geom_boxplot()
dat = vae_featuresSub
dat$group <- row.names(dat)
dat.m <- melt(dat, id.vars = "group")
ggplot(dat.m, aes(group, value)) + geom_boxplot()
View(dat)
?mad
summary(dat)
plot(rowMeans(dat))
plot(rowMeans(vae_featuresSub))
plot(rowMeans(vae_features))
plot(rowMeans(as.numeric(dat)))
clear
View(summary(dat))
View(summary(t(dat)))
summary(dat)
as.data.frame(summary(dat))
data.frame(unclass(summary(dat)), check.names = FALSE, stringsAsFactors = FALSE)
Viewdata.frame(unclass(summary(dat)), check.names = FALSE, stringsAsFactors = FALSE))
View(data.frame(unclass(summary(dat)), check.names = FALSE, stringsAsFactors = FALSE))
View(t(data.frame(unclass(summary(dat)), check.names = FALSE, stringsAsFactors = FALSE)))
library(dplyr)
ddply(melted, c("sex", "treatment", "variable"), summarise,
mean = mean(value), sd = sd(value),
sem = sd(value)/sqrt(length(value)))
colMeans(dat)
colMeans(vae_featuresSub)
boxplot(dat[1,])
vae_features = vae_features[2:nrow(vae_features), ]
boxplot(vae_features[1,])
vae_features[1,\]
vae_features[1,]
vae_features = data.frame(fread(vae.file), row.names=1)
colnames(vae_features) = vae_features[1, ]
vae_features = vae_features[2:nrow(vae_features), ]
View(vae_features)
vae_features[1,]
boxplot(vae_features[1,])
boxplot(vae_features)
m <- apply(vae_features, MARGIN = 2, FUN = median, na.rm = TRUE)
m
o <- order(m, decreasing = FALSE)
o
boxplot(vae_features[,o])
vae_featuresSub = vae_features[m !=0, ]
dim(vae_featuresSub)
vae_featuresSub = vae_features[, m != 0]
dim(vae_featuresSub)
View(m)
m
m[o]
dir = 'C:/Users/atitus/Documents/github/VAE_analysis/results'
BRCA.covFile = '../BRCAtarget_covariates.csv'
setwd(dir)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
BRCA.covs$sample.typeInt = ifelse(BRCA.covs$sample.type == 'Solid Tissue Normal', 0, 1)
BRCA.covs = BRCA.covs[!is.na(BRCA.covs$age.Dx), ]
dir = 'C:/Users/atitus/Documents/github/VAE_analysis'
setwd(dir)
BRCA.covs = BRCA.covs[order(BRCA.covs$Basename, decreasing=T), ]
## VAE nodes
vae.file = 'results/encoded_methyl_onehidden_warmup_batchnorm_300K-100.tsv'
vae = data.frame(fread(vae.file))
colnames(vae) = vae[1,]
rownames(vae) = vae[,1]
vae = vae[2:nrow(vae), 2:ncol(vae)]
vae = vae[rownames(vae) %in% BRCA.covs$Basename,]
vae = vae[order(rownames(vae), decreasing=T), ]
## Check sample concordance
all(rownames(vae) == rownames(betas))
all(BRCA.covs$Basename == rownames(betas))
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
library(reshape)
vae.sub = vae#[, c(1, 8, 13, 16, 33, 40, 48, 49, 55, 56, 58, 66, 68, 86, 93)  ]
vae.sub$SubjectID = rownames(vae.sub)
VAE.covs = merge(vae.sub, BRCA.covs, by.x = 'SubjectID', by.y = 'Basename')
temp = melt(VAE.covs[,  c('sample.typeInt', "sample.type", "PAM50.RNAseq")],
id=c('sample.typeInt', 'sample.type', 'PAM50.RNAseq'))
colnames(temp) = c('SampleTypeInt', 'SampleType', 'PAM50orNormal', 'Node', 'Activation')
View(temp)
temp = melt(VAE.covs,
id=c('sample.typeInt', 'sample.type', 'PAM50.RNAseq'))
colnames(temp) = c('SampleTypeInt', 'SampleType', 'PAM50orNormal', 'Node', 'Activation')
temp$SampleTypeInt = factor(temp$SampleTypeInt)
temp = melt(VAE.covs[, c(1:100,
'sample.typeInt', "sample.type", "PAM50.RNAseq")],
id=c('sample.typeInt', 'sample.type', 'PAM50.RNAseq'))
colnames(temp) = c('SampleTypeInt', 'SampleType', 'PAM50orNormal', 'Node', 'Activation')
temp$SampleTypeInt = factor(temp$SampleTypeInt)
ggplot(temp, aes(x = reorder(Node, Activation, FUN = median), y = Activation, fill = SampleTypeInt)) +
geom_boxplot(width=0.5) + xlab("Node") + #facet_grid(SampleTypeInt ~ .) +
ylab("Latent node activation value") +
scale_x_discrete(limits=c(66, 55, 13, 40, 93))
ggplot(temp, aes(x = reorder(Node, Activation, FUN = median), y = Activation, fill = SampleTypeInt)) +
geom_boxplot(width=0.5) + xlab("Node") + #facet_grid(SampleTypeInt ~ .) +
ylab("Latent node activation value") #+
boxplot(vae_features[,o])
View(vae_features)
rm(list = ls())
require(data.table)
require(limma)
#####################
# Load the data
#####################
#dir = '/Users/alexandertitus/Documents/github/DNAm_data_generation/code'
dir = 'C:/Users/atitus/Documents/github/VAE_analysis/results'
BRCA.covFile = '../BRCAtarget_covariates.csv'
setwd(dir)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
BRCA.covs$sample.typeInt = ifelse(BRCA.covs$sample.type == 'Solid Tissue Normal', 0, 1)
BRCA.covs = BRCA.covs[!is.na(BRCA.covs$age.Dx), ]
dir = 'C:/Users/atitus/Documents/github/VAE_analysis'
setwd(dir)
BRCA.covs = BRCA.covs[order(BRCA.covs$Basename, decreasing=T), ]
## VAE nodes
vae.file = 'results/encoded_methyl_onehidden_warmup_batchnorm_300K-100.tsv'
vae = data.frame(fread(vae.file))
colnames(vae) = vae[1,]
rownames(vae) = vae[,1]
vae = vae[2:nrow(vae), 2:ncol(vae)]
vae = vae[rownames(vae) %in% BRCA.covs$Basename,]
vae = vae[order(rownames(vae), decreasing=T), ]
temp = VAE.covs[VAE.covs$PAM50 != '', ]
vae.sub = vae#[, c(1, 8, 13, 16, 33, 40, 48, 49, 55, 56, 58, 66, 68, 86, 93)  ]
vae.sub$SubjectID = rownames(vae.sub)
VAE.covs = merge(vae.sub, BRCA.covs, by.x = 'SubjectID', by.y = 'Basename')
temp = VAE.covs[VAE.covs$PAM50 != '', ]
View(temp)
View(temp)
View(VAE.covs)
View(BRCA.covs)
VAE.covs = merge(vae.sub, BRCA.covs, by.x = 'SubjectID', by.y = 'Basename')
temp = VAE.covs[VAE.covs$PAM50 != '', ]
VAE.covs = merge(vae.sub, BRCA.covs, by.x = 'SubjectID', by.y = 'Basename')
View(VAE.covs)
vae.sub = vae#[, c(1, 8, 13, 16, 33, 40, 48, 49, 55, 56, 58, 66, 68, 86, 93)  ]
vae.sub$SubjectID = rownames(vae.sub)
VAE.covs = merge(vae.sub, BRCA.covs, by.x = 'SubjectID', by.y = 'Basename')
table(temp$PAM50.RNAseq)
table(temp$sample.type)
table(VAE.covs$PAM50.RNAseq)
table(VAE.covs$PAM50.RNAseq, VAE.covs$sample.type)
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[temp$PAM50.RNAseq != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[temp$PAM50.RNAseq != 'Normal', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[temp$PAM50.RNAseq != 'Normal' &
temp$sample.type != 'Solid Tissue Normal', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[temp$PAM50.RNAseq != 'Normal' &
temp$sample.type == 'Solid Tissue Normal', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[temp$PAM50.RNAseq != 'Normal' &&
temp$sample.type == 'Solid Tissue Normal', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp[temp$PAM50.RNAseq != 'Normal' &
temp$sample.type == 'Solid Tissue Normal', ]
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[(temp$PAM50.RNAseq != 'Normal' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[(temp$PAM50.RNAseq != 'Normal' &
temp$sample.type != 'Solid Tissue Normal'), ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp1 = subset(temp, PAM50.RNAseq != 'LumA' & sample.type == 'Solid Tissue Normal')
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp1 = subset(temp, (PAM50.RNAseq != 'LumA' & sample.type == 'Solid Tissue Normal'))
sum(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type == 'Solid Tissue Normal')
temp1 = temp[!(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type != 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq != 'LumA' &
temp$sample.type != 'Solid Tissue Normal'), ]
temp = temp[!(temp$PAM50.RNAseq == 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq == 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq == 'LumA' &
temp$sample.type != 'Solid Tissue Normal'), ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
table(temp1$PAM50.RNAseq, temp1$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = VAE.covs[VAE.covs$PAM50.RNAseq != '', ]
temp = temp[temp$sample.type != 'Metastatic', ]
temp = temp[!(temp$PAM50.RNAseq == 'LumA' &
temp$sample.type == 'Solid Tissue Normal'), ]
table(temp$PAM50.RNAseq, temp$sample.type)
temp = temp[!(temp$PAM50.RNAseq == 'Normal' &
temp$sample.type == 'Primary Tumor'), ]
table(temp$PAM50.RNAseq, temp$sample.type)
trainingRows <- sample(1:nrow(temp), 0.7*nrow(temp))
training <- temp[trainingRows, ]
test <- temp[-trainingRows, ]
train <- multinom(PAM50.RNAseq ~ `59` + `51` + `29` +
`60` + `27` + `68` +
`62` + `5` + `87` +
`60` + `95` + `15`, data = training)
library("nnet")
train <- multinom(PAM50.RNAseq ~ `59` + `51` + `29` +
`60` + `27` + `68` +
`62` + `5` + `87` +
`60` + `95` + `15`, data = training)
summary(train)
z <- summary(train)$coefficients/summary(train)$standard.errors
z
p <- (1 - pnorm(abs(z), 0, 1))*2
p
exp(coef(train))
pred <- predict (train, test, "probs") # predict on new data
pred
pred_class <- predict(train, test)
pred_class
table(pred_class, test$PAM50.RNAseq)
mean(as.character(pred_class) == as.character(test$PAM50.RNAseq))
?cor
dir = 'C:/Users/atitus/Documents/github/VAE_analysis/results'
BRCA.covFile = '../BRCAtarget_covariates.csv'
setwd(dir)
BRCA.covs = data.frame(fread(BRCA.covFile), row.names=1)
BRCA.covs$sample.typeInt = ifelse(BRCA.covs$sample.type == 'Solid Tissue Normal', 0, 1)
BRCA.covs = BRCA.covs[!is.na(BRCA.covs$age.Dx), ]
dir = 'C:/Users/atitus/Documents/github/VAE_analysis'
setwd(dir)
## Betas
beta.file = 'data/TCGA_BRCA_top300kMAD_cpg.tsv'
betas = data.frame(fread(beta.file))
rownames(betas) = betas[,1]
betas = betas[,2:ncol(betas)]
betas = betas[rownames(betas) %in% BRCA.covs$Basename, ]
betas = betas[order(rownames(betas), decreasing=T), ]
BRCA.covs = BRCA.covs[order(BRCA.covs$Basename, decreasing=T), ]
## VAE nodes
vae.file = 'results/encoded_methyl_onehidden_warmup_batchnorm_300K-100.tsv'
vae = data.frame(fread(vae.file))
colnames(vae) = vae[1,]
rownames(vae) = vae[,1]
vae = vae[2:nrow(vae), 2:ncol(vae)]
vae = vae[rownames(vae) %in% BRCA.covs$Basename,]
vae = vae[order(rownames(vae), decreasing=T), ]
## Check sample concordance
all(rownames(vae) == rownames(betas))
all(BRCA.covs$Basename == rownames(betas))
node_corrs = function(node, betas, vae) {
vaeNode = vae[, as.character(node)]
cor.func = function(x){return(cor(x, vaeNode, method = 'spearman'))}
correlations = apply(betas, 2, cor.func)
correlations = data.frame(correlations)
correlations = cbind('CpG' = rownames(correlations), correlations)
nodeLabel = paste('VAE', node, sep = '')
correlations = cbind(nodeLabel = rep(nodeLabel, nrow(correlations)), correlations)
results = correlations[order(abs(correlations$correlations), decreasing=T), ]
return(results)
}
subset_cors = function(threshold, correlations){
cor.sub = correlations[(correlations$correlations >= threshold |
correlations$correlations < -1*threshold), ]
return(cor.sub)
}
threshold = 0.5
correlations1 = node_corrs(1, betas, vae)
correlations1 = subset_cors(threshold, correlations1)
plot_corr_elbow = function(correlationsN, node, threshold, plot_line = F, line = NA){
## Correlation elbow
cors = correlationsN$correlations
file.name = paste('correlation_elbow_node', node, '.png', sep = '')
png(file.name, width = 1000, height = 1000, res = 100)
plot(abs(cors), main=paste('Node ', node, sep = ''),
ylab = '|Correlation|', xlab='Index', ylim = c(threshold, 0.9))
if(plot_line == T){
abline(h = line)
abline(v = 1000, col = "black")
abline(v = 5000, col = "green")
}
dev.off()
}
plot_corr_elbow(correlations1, 1, threshold, plot_line = T, line = 0.75)
View(correlations1)
